install.packages("Hmisc")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
rm(vowel.train)
rm(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
str(vowel.train)
str(vowel.test)
set.seed(33833)
train1 <- train(y~., data=vowel.train, method="rf")
library(caret)
train1 <- train(y~., data=vowel.train, method="rf")
train2 <- train(y~., data=vowel.train, method="gbm")
train2 <- train(y~., data=vowel.train, method="gbm")
install.packages("gbm")
train2 <- train(y~., data=vowel.train, method="gbm")
predict1 <- predict(train1, vowel.test)
predict2 <- predict(train2, vowel.test)
combined <- data.frame(predict1,predict2,y=vowel.test$y)
combinedFit <- train(y~., method="gam", data=combined)
combPredict <- predict(combinedFit,combined)
combPredict
c1 <- confusionMatric(predict1,vowel.test)
c1 <- confusionMatrix(predict1,vowel.test)
c1 <- confusionMatrix(predict1,vowel.test$y)
c1
c2 <- confusionMatrix(predict2,vowel.test$y)
c2
c3 <- confusionMatrix(combPredict,vowel.test$y)
c3
c3 <- confusionMatrix(combPredict,combined$y)
c3
#quiz 4
library(caret)
#q1
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
train1 <- train(y~., data=vowel.train, method="rf")
train2 <- train(y~., data=vowel.train, method="gbm")
predict1 <- predict(train1, vowel.test)
predict2 <- predict(train2, vowel.test)
combined <- data.frame(predict1,predict2,y=vowel.test$y)
combinedFit <- train(y~., method="gam", data=combined)
combPredict <- predict(combinedFit, combined)
c1 <- confusionMatrix(predict1,vowel.test$y)
c2 <- confusionMatrix(predict2,vowel.test$y)
c3 <- confusionMatrix(combPredict,combined$y)
c1
c2$Accuracy
c2
c3
sqrt(sum((combPredict-vowel.test$y)^2))
combPredict
(combPredict-vowel.test$y)
vowel.test$y
sqrt(sum((combPredict-as.numeric(vowel.test$y)^2))
)
as.numeric(vowel.test$y)
sqrt(sum((combPredict-as.numeric(vowel.test$y))^2))
sqrt(sum((as.numeric(combPredict)-as.numeric(vowel.test$y))^2))
sum(combPredict == vowel.test$y)
combPredict
sum(predict1 == predict2)
305/462
length(vowel.test)
length(vowel.test$y)
sum(predict1 == predict2)/length(vowel.test$y)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
fit1 <- train(diagnosis~., data=training, method="rf")
fit2 <- train(diagnosis~., data=training, method="gbm")
fit3 <- train(diagnosis~., data=training, method="lda")
combined <- data.frame(fit1,fit2,fit3,diag=testing$diagnosis)
combinedFit <- train(diagnosis~., method="rf", data=combined)
combined <- data.frame(fit1,fit2,fit3,diagnosis=testing$diagnosis)
combinedFit <- train(diagnosis~., method="rf", data=combined)
predict1 <- predict(fit1, testing)
predict2 <- predict(fit2, testing)
predict3 <- predict(fit3, testing)
combined <- data.frame(predict1,predict2,predict3,diagnosis=testing$diagnosis)
combinedFit <- train(diagnosis~., method="rf", data=combined)
combPredict <- predict(combinedFit, combined)
c3 <- confusionMatrix(combPredict,combined$diagnosis)
c3
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
fit1 <- train(diagnosis~., data=training, method="rf")
fit2 <- train(diagnosis~., data=training, method="gbm")
fit3 <- train(diagnosis~., data=training, method="lda")
predict1 <- predict(fit1, testing)
predict2 <- predict(fit2, testing)
predict3 <- predict(fit3, testing)
combined <- data.frame(predict1,predict2,predict3,diagnosis=testing$diagnosis)
combinedFit <- train(diagnosis~., method="rf", data=combined)
combPredict <- predict(combinedFit, combined)
c3 <- confusionMatrix(combPredict,combined$diagnosis)
c3
c4 <- confusionMatrix(combPredict,combined$diagnosis)
c1 <- confusionMatrix(predict1,testing$diagnosis)
c2 <- confusionMatrix(predict2,testing$diagnosis)
c3 <- confusionMatrix(predict3,testing$diagnosis)
str(c1)
c1$overall["Accuracy"]
c2$overall["Accuracy"]
c3$overall["Accuracy"]
c3$overall$Accuracy
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
str(training)
set.seed(233)
fit1 <- train(CompressiveStrength~., data=training, method="lasso")
fit1
?plot.enet
plot(fit1)
str(fit)
str(fit1)
fit1$coef
plot(fit1,xvar="L1norm")
plot(fit1,xvar="penalty")
fit1$enet
plot.enet(fit1)
plot(fit1)
enet(fit1)
par(mfrow=c(2,2))
plot(object)
plot(object,xvar="step")
par(mfrow=c(2,2))
plot(fit1)
plot(fit1,xvar="step")
par(mfrow=c(2,2))
plot(fit1)
plot(fit1,xvar="step")
predict1 <- predict(fit1, testing)
predict( model, newx=testing, s=.9, mode="fraction", type="coefficients" )
predict( fit1, newx=testing, s=.9, mode="fraction", type="coefficients" )
?predict
plot(fit1,xvar="lambda")
plot(fit1,xvar="lambdfdfdfda")
plot.enet(fit1,xvar="lambda")
plot.enet(fit1,xvar="fraction")
fit1
plot.enet(predict1,xvar="fraction")
plot.enet(fit1,xvar="fraction")
?plot.enet
enet(training,fit1,lambda=.8)
enet(training,predict1,lambda=.8)
summary(fit1)
fit1$beta.pure
str(fit1)
plot(fit.enet,xvar="penalty")
plot(plot.enet,xvar="penalty")
fit$finalModel
fit1$finalModel
fit1$finalModel$Cp
plot.enet(fit1$finalModel)
par(cex=.8,las=2, mai=c(par("mai")[1:3],2))
plot.enet(fit1$finalModel)
getwd()
setwd("C:/Users/robertc/Desktop/R/datasciencecoursera/PracticalML")
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("lubridate")
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
?bats
bats
library(forecast)
install.packages("zoo")
library(forecast)
?bats
fit1 <- bats(training)
fit1 <- bats(tstrain)
?forecast
forecast(fit1)
f <- forecast(fit1)
f[,5:6]
f[,5:6]
f[,4:5]
dim(f)
class(f)
str(f)
f$upper
f
testing
training
length(testing)
dim(testing)
f <- forecast(fit1,dim(tesing)[1])
f <- forecast(fit1,dim(testing)[1])
f
testing
str(f)
f <- forecast(fit1,level=c(95), h=dim(testing)[1])
f
testing
f$upper
f$level
f$fitted
testing
testing[1,1]
testing[1,4]
testing[1,3]
testing[1,"3"visitsTumblr""]
testing[1,visitsTumblr"]
""
testing[1,"visitsTumblr"]
length(testing$upper)
length(f$upper)
sapply(1:235,function(x) testing[x,3] >= f[x]$lower & testing[x,3] <= f[x]$upper)
f$upper[1]
sapply(1:235,function(x) testing[x,3] >= f$lower[x] & testing[x,3] <= f$upper[x])
sum(sapply(1:235,function(x) testing[x,3] >= f$lower[x] & testing[x,3] <= f$upper[x]))
226/235
lenTesting <- dim(testing)[1]
f <- forecast(fit1, level=c(95), h=lenTesting)
a <- sum(sapply(1:235,function(x) testing[x,3] >= f$lower[x] & testing[x,3] <= f$upper[x])) / lenTesting
install.packages("e1071")
